// Code generated by "enumer -type=Ticker -linecomment -sql -json"; DO NOT EDIT.

package models

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _TickerName = "BTC_USD"

var _TickerIndex = [...]uint8{0, 7}

const _TickerLowerName = "btc_usd"

func (i Ticker) String() string {
	i -= 1
	if i < 0 || i >= Ticker(len(_TickerIndex)-1) {
		return fmt.Sprintf("Ticker(%d)", i+1)
	}
	return _TickerName[_TickerIndex[i]:_TickerIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TickerNoOp() {
	var x [1]struct{}
	_ = x[BTCUSD-(1)]
}

var _TickerValues = []Ticker{BTCUSD}

var _TickerNameToValueMap = map[string]Ticker{
	_TickerName[0:7]:      BTCUSD,
	_TickerLowerName[0:7]: BTCUSD,
}

var _TickerNames = []string{
	_TickerName[0:7],
}

// TickerString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TickerString(s string) (Ticker, error) {
	if val, ok := _TickerNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _TickerNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Ticker values", s)
}

// TickerValues returns all values of the enum
func TickerValues() []Ticker {
	return _TickerValues
}

// TickerStrings returns a slice of all String values of the enum
func TickerStrings() []string {
	strs := make([]string, len(_TickerNames))
	copy(strs, _TickerNames)
	return strs
}

// IsATicker returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Ticker) IsATicker() bool {
	for _, v := range _TickerValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Ticker
func (i Ticker) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Ticker
func (i *Ticker) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Ticker should be a string, got %s", data)
	}

	var err error
	*i, err = TickerString(s)
	return err
}

func (i Ticker) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Ticker) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Ticker: %[1]T(%[1]v)", value)
	}

	val, err := TickerString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
